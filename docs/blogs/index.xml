<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Li Xiang Blogging</title>
    <link>https://lixiang233.github.io/blogs/</link>
    <description>Recent content in Articles on Li Xiang Blogging</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 May 2020 15:42:17 +0800</lastBuildDate>
    
	<atom:link href="https://lixiang233.github.io/blogs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ClientSet和Informer</title>
      <link>https://lixiang233.github.io/blogs/clientset/clientset/</link>
      <pubDate>Tue, 19 May 2020 15:42:17 +0800</pubDate>
      
      <guid>https://lixiang233.github.io/blogs/clientset/clientset/</guid>
      <description> ClientSet Informer 使用场景 Contact Me   ClientSet ClientSet是一个Client的集合，支持对所有的Api-server资源的(Create/Update/Delete/Get/List/Watch)等操作，ClientSet的每一次请求都是直接对ApiServer的一次调用，有以下Client：
每个Client支持对一种ApiVersion下的资源进行相应操作，如Pod的操作在CoreV1这个client中：
支持对Pod进行以下操作：
使用ClientSet进行watch时，会返回一个ResultChan和Stop func，需要自己实现从ResultChan中取出watch的对象处理，调用Stop func可以停止watch。
Informer Informer是用来对ApiServer资源的查询(Get/List/Watch)操作，Informer会对ApiServer进行list/watch，并将结果缓存到内存中，可以通过调用Lister的Get/List对资源进行查询，调用Get/List实际上是查询Informer缓存的内容(避免频繁访问ApiServer)，注意查询返回的Pod是只读的，修改前需要DeepCopy。和ClientSet不同，informer是针对某一种具体的资源单独的，比如对Pod的为 PodInformer：
Informer启动时，可以向Informer注册处理资源Add/Update/Del事件的Handler，在有对应事件时，Informer会自动调用注册的func，而不需要使用者自行处理。
Informer结构：
由Lister提供访问对cache的查询，Informer实现watch到事件调用Handler
使用场景 当需要对某个资源进行频繁查询或watch时，推荐使用Informer；当需要对多个资源低频率查询或需要对资源进行除查询以外的其他操作时，推荐使用ClientSet。
 Contact Me Your Name Email Address An email address is required.  Message   </description>
    </item>
    
    <item>
      <title>Scheduling Queue</title>
      <link>https://lixiang233.github.io/blogs/schedulingqueue/scheduling-queue/</link>
      <pubDate>Mon, 27 Apr 2020 15:23:43 +0800</pubDate>
      
      <guid>https://lixiang233.github.io/blogs/schedulingqueue/scheduling-queue/</guid>
      <description>简介：  activeQ  数据结构 堆的实现 lessFunc初始化：   podBackoffQ  数据结构   unschedulableQ  数据结构     运行原理  pod流向   Contact Me   简介： Scheduling-queue是scheduler存储待调度Pod的队列，1.18版本scheduling-queue为PriorityQueue，结构如下：
type PriorityQueue struct { stop chan struct{} clock util.Clock // pod initial backoff duration.  podInitialBackoffDuration time.Duration // pod maximum backoff duration.  podMaxBackoffDuration time.Duration lock sync.RWMutex cond sync.Cond // activeQ is heap structure that scheduler actively looks at to find pods to  // schedule.</description>
    </item>
    
    <item>
      <title>Event Exporter</title>
      <link>https://lixiang233.github.io/blogs/event-exporter/event-exporter/</link>
      <pubDate>Wed, 01 Apr 2020 11:31:18 +0800</pubDate>
      
      <guid>https://lixiang233.github.io/blogs/event-exporter/event-exporter/</guid>
      <description>基本概念  Event event-exporter   社区event-exporter相关项目  caicloud/event-exporter  event获取方式 event暴露方式 实现方式 部署方式   opsgenie/kubernetes-event-exporter  event获取方式 event暴露方式 推送规则及receiver配置     See below for configuring the receivers - 实现方式 - 部署方式  GoogleCloudPlatform/k8s-stackdriver/event-exporter  event获取方式 event暴露方式 实现方式 部署方式     Contact Me   基本概念 Event Event的定义是&amp;quot;Event is a report of an event somewhere in the cluster&amp;rdquo;，event反应记录了集群中发生的事件。默认配置下，event会在ETCD中保存一个小时。event有以下属性：
 InvolvedObject event所属的对象，如Pod、Node等。 Reason 对于event的简短描述，machine understandable string。如: FailedScheduling、NodeNotReady、NodeHasSufficientMemory等。 Message 对于event较为详细的描述，如NodeNotReady对应的message为：Node k8s-slave status is now: NodeNotReady。 Source 上报event的组件，如：systemd-monitor、kubelet等。 FirstTimestamp 首次记录该event时间。 LastTimestamp 最近一次记录该event时间。 Count event出现的次数。 Type event的类型，当前只有Normal和Warning两种。 EventTime event首次被发现的时间。一般不填，为空。 Action 记录对event所属对象进行了什么操作，或什么操作失败了。 Related 可选的辅助对象，用于更复杂的操作。 ReportingController 发出该event的controller。如：kubernetes.</description>
    </item>
    
  </channel>
</rss>